# This is a basic workflow to help you get started with Actions

name: Add Release Artifacts

# Controls when the workflow will run
on:
  # Triggers the workflow when a release is created
  release:
    types: [created,published,released]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tagName:
        description: The name of the tag of the release to upload the artifacts for
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Reset packages directory
        run: |
          rm -fR packages
          mkdir packages
      - name: Set env from release event
        if: ${{ github.event_name == 'release' }}
        run: echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
      - name: Set env from manual trigger
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        env:
          TAG_NAME: ${{ github.event.inputs.tagName }}
      - name: Download artifact
        # You may pin to the exact commit or the version.
        # uses: aochmann/actions-download-artifact@5709392f11b5937bd316e52687ad87f7deced5f5
        uses: aochmann/actions-download-artifact@1.0.4
        with:
          name: fubardev-unit-of-work-${{ env.TAG_NAME }}
          path: packages/
      - name: Upload assets to a Release
        # You may pin to the exact commit or the version.
        # uses: AButler/upload-release-assets@ec6d3263266dc57eb6645b5f75e827987f7c217d
        uses: AButler/upload-release-assets@v2.0
        with:
          # A glob of the files to upload
          files: 'packages/*'
          # The tag name of the release to upload to (if not specified then the release that triggered the workflow is used)
          release-tag: ${{ env.TAG_NAME }}
          # secrets.GITHUB_TOKEN
          repo-token: ${{ secrets.GITHUB_TOKEN }}
